buildscript {
	buildDir = './build'
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1"
		classpath "io.freefair.gradle:lombok-plugin:4.1.6"
		classpath "mysql:mysql-connector-java:6.0.6"
	}
}

plugins {
	id "io.freefair.lombok" version "4.1.6"
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'com.palantir.docker' version '0.22.1'
	id 'com.palantir.docker-run' version '0.22.1'
	id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "io.freefair.lombok"
apply plugin: "com.palantir.docker"
apply plugin: "com.palantir.docker-run"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation "org.mapstruct:mapstruct:1.3.0.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

	// If you are using mapstruct in test code
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

	implementation "mysql:mysql-connector-java"

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	sourceCompatibility = "1.8"
	targetCompatibility = "1.8"
	options.deprecation = true
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked"
}

compileJava {
	options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-Amapstruct.suppressGeneratorVersionInfoComment=true',
			'-Amapstruct.defaultComponentmodel=spring'
	]
}

bootJar {
	baseName = 'storedprocexample'
	version =  '1.0.0'
	mainClassName = 'com.example.storedproc.StoredProcExampleApplication'
}

task unpack(type: Copy) {
	dependsOn bootJar
//        from(zipTree(tasks.bootJar.outputs.files.singleFile))
	from(zipTree("build/libs/storedprocexample-1.0.0.jar"))
	into("build/dependency")
}

docker {
	name "storedprocexample"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}